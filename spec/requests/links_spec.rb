require 'rails_helper'
require 'devise/jwt/test_helpers'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/links", type: :request do
  user = User.first
  link = Link.first
  # This should return the minimal set of attributes required to create a valid
  # Link. As you add validations to Link, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "google",
      url: "https://www.google.com",
      user_id: user.id
    }
  }

  let(:invalid_attributes) {
    {
      name: "naver",
      url: "https://www.naver.com"
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # LinksController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  headers = { 'Accept' => 'application/json', 'Content-Type' => 'application/json' }
  # This will add a valid token for `user` in the `Authorization` header
  auth_headers = Devise::JWT::TestHelpers.auth_headers(headers, user)

  describe "GET /index" do
    it "renders a successful response" do
      get links_url, headers: auth_headers, as: :json
      expect(response).to have_http_status(:ok)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get "/links/#{link.id}", headers: auth_headers, as: :json
      expect(response).to have_http_status(:ok)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "renders a JSON response with the new link" do
        post links_url, params: { link: valid_attributes }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Link" do
        expect { post links_url, params: { link: invalid_attributes }, as: :json }.to change(Link, :count).by(0)
      end

      it "renders a JSON response with errors for the new link" do
        post links_url, params: { link: invalid_attributes }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      link = Link.first

      let(:new_attributes) {
        {
          name: "google",
          url: "https://www.google.com"
        }
      }

      it "renders a JSON response with the link" do
        patch "/links/#{link.id}", params: { link: new_attributes }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid parameters" do
      link = Link.first

      let(:invalid_attributes) {
        {
          name: "daum",
          url: "https://www.daum.net"
        }
      }

      it "renders a JSON response with errors for the link" do
        patch "/links/#{link.id}", params: { link: invalid_attributes }, headers: auth_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested link" do
      expect { delete "/links/#{link.id}", headers: auth_headers, as: :json }.to change(Link, :count).by(-1)
    end
  end
end
